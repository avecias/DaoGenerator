package PACKAGE_ROOT.daoImpl;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import PACKAGE_ROOT.dao.CLASSDao;
import PACKAGE_ROOT.persistence.HibernateUtil;
import PACKAGE_POJOS.CLASS;

import java.util.ArrayList;
import org.hibernate.HibernateException;

public class CLASSDaoImpl implements CLASSDao {

    @Override
    public void save(CLASS OBJECT) throws HibernateException {
            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction tx = session.beginTransaction();
            session.save(OBJECT);
            tx.commit();
            session.close();
    }

    @Override
    public void update(CLASS OBJECT) throws HibernateException {
            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction tx = session.beginTransaction();
            session.update(OBJECT);
            tx.commit();
            session.close();

    }

    @Override
    public void delete(CLASS OBJECT) throws HibernateException {
            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction tx = session.beginTransaction();
            session.delete(OBJECT);
            tx.commit();
            session.close();
    }

    @Override
    public List<CLASS> getAll() throws HibernateException {
            List<CLASS> CLASSsList = new ArrayList<>();
            List<?> objectList = new ArrayList<>();
            Session session = HibernateUtil.getSessionFactory().openSession();
            objectList = session.createCriteria(CLASS.class).list();
            for (Object ob : objectList) {
                    if (ob instanceof CLASS) {
                            CLASSsList.add((CLASS) ob);
                    }
            }
            session.close();
            return CLASSsList;
    }

    @Override
    public CLASS getById(Integer id) throws HibernateException {
            Session session = HibernateUtil.getSessionFactory().openSession();
            CLASS OBJECT = (CLASS) session.get(CLASS.class, id);
            session.close();
            return OBJECT;
    }
}
