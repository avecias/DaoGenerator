

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.log4j.Logger;

/**
 *
 * @author gvalentin Created on Sep 4, 2018, 5:18:39 PM
 */
public class GenerateCode {

    private static final Logger LOG = Logger.getLogger(GenerateCode.class);
    private static final String CODE = "/*\n"
            + " * To change this license header, choose License Headers in Project Properties.\n"
            + " * To change this template file, choose Tools | Templates\n"
            + " * and open the template in the editor.\n"
            + " */\n"
            + "package mx.trillas.administracionilustraciones.controller.service;\n"
            + "\n"
            + "import java.util.ArrayList;\n"
            + "import java.util.List;\n"
            + "import javax.servlet.http.HttpServletRequest;\n"
            + "import javax.servlet.http.HttpServletResponse;\n"
            + "import mx.trillas.administracionilustraciones.controller.filter.Privilege;\n"
            + "import mx.trillas.administracionilustraciones.exception.DataBaseException;\n"
            + "import mx.trillas.administracionilustraciones.exception.ForbiddenException;\n"
            + "import mx.trillas.administracionilustraciones.mapper.CLASSMapper;\n"
            + "import mx.trillas.administracionilustraciones.mapper.MapperException;\n"
            + "import mx.trillas.administracionilustraciones.model.dao.CLASSDao;\n"
            + "import mx.trillas.administracionilustraciones.model.dao.impl.CLASSDaoImpl;\n"
            + "import mx.trillas.administracionilustraciones.model.entity.Actions;\n"
            + "import mx.trillas.administracionilustraciones.model.entity.ResultCLASS;\n"
            + "import mx.trillas.administracionilustraciones.model.entity.ResultStatus;\n"
            + "import mx.trillas.administracionilustraciones.model.entity.dto.CLASSDto;\n"
            + "import mx.trillas.administracionilustraciones.model.entity.pojo.CLASS;\n"
            + "import mx.trillas.administracionilustraciones.model.persistence.HibernateUtil;\n"
            + "import mx.trillas.administracionilustraciones.util.ConnectionUtil;\n"
            + "import mx.trillas.administracionilustraciones.validation.CLASSValidation;\n"
            + "import mx.trillas.administracionilustraciones.validation.ValidationException;\n"
            + "import org.apache.log4j.Logger;\n"
            + "import org.hibernate.HibernateException;\n"
            + "import org.hibernate.Session;\n"
            + "import org.hibernate.Transaction;\n"
            + "import org.springframework.web.bind.annotation.RequestMapping;\n"
            + "import org.springframework.web.bind.annotation.RequestMethod;\n"
            + "import org.springframework.web.bind.annotation.RestController;\n"
            + "\n"
            + "/**\n"
            + " *\n"
            + " * @author gvalentin Created on Sep 26, 2018, 4:45:47 PM\n"
            + " */\n"
            + "@RestController\n"
            + "@RequestMapping(value = \"/POJO\")\n"
            + "public class CLASSController implements Controller<ResultCLASS, CLASSDto> {\n"
            + "\n"
            + "    private static final Logger LOG = Logger.getLogger(CLASSController.class);\n"
            + "    // DAO\n"
            + "    private final CLASSDao POJODao = new CLASSDaoImpl();\n"
            + "    // MAPPER\n"
            + "    private final CLASSMapper POJOMapper = new CLASSMapper();\n"
            + "    // VALIDATOR\n"
            + "    private final CLASSValidation POJOValidation = new CLASSValidation();\n"
            + "\n"
            + "    @RequestMapping(value = \"/get/{idCLASS}\", method = RequestMethod.GET)\n"
            + "    @Override\n"
            + "    public ResultCLASS getOneById(int idCLASS, HttpServletRequest request, HttpServletResponse response) {\n"
            + "        CLASSDto POJODto = new CLASSDto();\n"
            + "        POJODto.setIdCLASS(idCLASS);\n"
            + "        ResultCLASS result = new ResultCLASS(POJODto, ResultStatus.OBJECT_NOT_FOUND.getValue(), ResultStatus.OBJECT_NOT_FOUND.toString());\n"
            + "        Session session = null;\n"
            + "        try {\n"
            + "            Privilege.hasPrivileges(request, Actions.SHOW);\n"
            + "            POJOValidation.add(POJODto);\n"
            + "            session = HibernateUtil.getSessionFactory().openSession();\n"
            + "            CLASS a = POJOMapper.fromDtoToEntity(POJODto);\n"
            + "            a = POJODao.read(a, session);\n"
            + "            session.close();\n"
            + "            if (a == null) {\n"
            + "                throw new DataBaseException(\"Dirección con idCLASS \" + idCLASS + \" no encontrado\");\n"
            + "            }\n"
            + "            POJODto = POJOMapper.fromEntityToDto(a);\n"
            + "            result.setCLASS(POJODto);\n"
            + "            result.setStatus(ResultStatus.OK.getValue());\n"
            + "            result.setMessage(ResultStatus.OK.name());\n"
            + "        } catch (ForbiddenException ex) {\n"
            + "            result.setStatus(ResultStatus.FORBIDDEN.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en privilegios\", ex);\n"
            + "        } catch (ValidationException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_IS_NOT_VALID.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error de validación \", ex);\n"
            + "        } catch (HibernateException ex) {\n"
            + "            result.setStatus(ResultStatus.ERROR_DATA_BASE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en hibernate\", ex);\n"
            + "        } catch (MapperException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_NOT_MAPPED.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en el mapeo\", ex);\n"
            + "        } catch (DataBaseException ex) {\n"
            + "            result.setStatus(ResultStatus.ERROR_DATA_BASE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error al buscar\", ex);\n"
            + "        } catch (Exception e) {\n"
            + "            result.setStatus(ResultStatus.ERROR.getValue());\n"
            + "            result.setMessage(e.getMessage());\n"
            + "            LOG.error(\"Error\", e);\n"
            + "        }\n"
            + "        ConnectionUtil.close(session);\n"
            + "        return result;\n"
            + "    }\n"
            + "\n"
            + "    @RequestMapping(value = \"/create/\", method = RequestMethod.POST)\n"
            + "    @Override\n"
            + "    public ResultCLASS createOne(CLASSDto POJODto, HttpServletRequest request, HttpServletResponse response) {\n"
            + "        ResultCLASS result = new ResultCLASS(POJODto, ResultStatus.OBJECT_NULL.getValue(), ResultStatus.OBJECT_NULL.toString());\n"
            + "        Session session = null;\n"
            + "        Transaction tx = null;\n"
            + "        try {\n"
            + "            // VALIDATE\n"
            + "            POJOValidation.add(POJODto);\n"
            + "            Privilege.hasPrivileges(request, Actions.CREATE);\n"
            + "            // TRANSACTION\n"
            + "            session = HibernateUtil.getSessionFactory().openSession();\n"
            + "            tx = session.beginTransaction();\n"
            + "            // MAP\n"
            + "            CLASS POJO = POJOMapper.fromDtoToEntity(POJODto);\n"
            + "            // CREATE\n"
            + "            POJO = POJODao.create(POJO, session);\n"
            + "            tx.commit();\n"
            + "            session.close();\n"
            + "            // CLOSE SESSION\n"
            + "            if (POJO == null) {\n"
            + "                throw new DataBaseException(\"No se logró guardar en la base de datos\");\n"
            + "            }\n"
            + "            // REMAP\n"
            + "            POJODto = POJOMapper.fromEntityToDto(POJO);\n"
            + "            // RESULT\n"
            + "            result.setCLASS(POJODto);\n"
            + "            result.setStatus(ResultStatus.OK.getValue());\n"
            + "            result.setMessage(\"Dirección guardada con éxito\");\n"
            + "        } catch (ForbiddenException ex) {\n"
            + "            result.setStatus(ResultStatus.FORBIDDEN.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en privilegios\", ex);\n"
            + "        } catch (ValidationException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_IS_NOT_VALID.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error de validación \", ex);\n"
            + "        } catch (HibernateException ex) {\n"
            + "            ConnectionUtil.rollBack(tx);\n"
            + "            result.setStatus(ResultStatus.ERROR_HIBERNATE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en hibernate\", ex);\n"
            + "        } catch (MapperException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_NOT_MAPPED.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en el mapeo\", ex);\n"
            + "        } catch (DataBaseException ex) {\n"
            + "            result.setStatus(ResultStatus.ERROR_DATA_BASE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error al crear\", ex);\n"
            + "        } catch (Exception e) {\n"
            + "            result.setStatus(ResultStatus.ERROR.getValue());\n"
            + "            result.setMessage(e.getMessage());\n"
            + "            LOG.error(\"Error\", e);\n"
            + "        }\n"
            + "        ConnectionUtil.close(session);\n"
            + "        return result;\n"
            + "    }\n"
            + "\n"
            + "    @RequestMapping(value = \"/update/\", method = RequestMethod.POST)\n"
            + "    @Override\n"
            + "    public ResultCLASS updateOne(CLASSDto POJODto, HttpServletRequest request, HttpServletResponse response) {\n"
            + "        ResultCLASS result = new ResultCLASS(POJODto, ResultStatus.OBJECT_NULL.getValue(), ResultStatus.OBJECT_NULL.toString());\n"
            + "        Session session = null;\n"
            + "        Transaction tx = null;\n"
            + "        try {\n"
            + "            // VALIDATE\n"
            + "            POJOValidation.update(POJODto);\n"
            + "            Privilege.hasPrivileges(request, Actions.ALTER);\n"
            + "            // GET\n"
            + "            CLASSDto compDto = new CLASSDto();\n"
            + "            compDto.setIdCLASS(POJODto.getIdCLASS());\n"
            + "            CLASS comp = POJOMapper.fromDtoToEntity(compDto);\n"
            + "            session = HibernateUtil.getSessionFactory().openSession();\n"
            + "            comp = POJODao.read(comp, session);\n"
            + "            session.close();\n"
            + "            // CLOSE SESSION\n"
            + "            if (comp == null) {\n"
            + "                throw new DataBaseException(\"No se logró encontrar la dirección con id = \" + POJODto.getIdCLASS() + \" para modificar\");\n"
            + "            }\n"
            + "            // COMPARE\n"
            + "            //\n"
            + "            CLASS POJO = POJOMapper.fromDtoToEntity(POJODto);\n"
            + "            // TRANSACTION\n"
            + "            session = HibernateUtil.getSessionFactory().openSession();\n"
            + "            tx = session.beginTransaction();\n"
            + "            POJO = POJODao.update(POJO, session);\n"
            + "            tx.commit();\n"
            + "            session.close();\n"
            + "            // SESSION CLOSE\n"
            + "            if (POJO == null) {\n"
            + "                throw new DataBaseException(\"No se logró actualizar en la base de datos\");\n"
            + "            }\n"
            + "            POJODto = POJOMapper.fromEntityToDto(POJO);\n"
            + "            result.setCLASS(POJODto);\n"
            + "            result.setStatus(ResultStatus.OK.getValue());\n"
            + "            result.setMessage(\"Dirección actualizada con éxito\");\n"
            + "        } catch (ForbiddenException ex) {\n"
            + "            result.setStatus(ResultStatus.FORBIDDEN.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en privilegios\", ex);\n"
            + "        } catch (ValidationException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_IS_NOT_VALID.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error de validación \", ex);\n"
            + "        } catch (HibernateException ex) {\n"
            + "            ConnectionUtil.rollBack(tx);\n"
            + "            result.setStatus(ResultStatus.ERROR_HIBERNATE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en hibernate\", ex);\n"
            + "        } catch (MapperException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_NOT_MAPPED.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en el mapeo\", ex);\n"
            + "        } catch (DataBaseException ex) {\n"
            + "            result.setStatus(ResultStatus.ERROR_DATA_BASE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error al crear\", ex);\n"
            + "        } catch (Exception e) {\n"
            + "            result.setStatus(ResultStatus.ERROR.getValue());\n"
            + "            result.setMessage(e.getMessage());\n"
            + "            LOG.error(\"Error\", e);\n"
            + "        }\n"
            + "        ConnectionUtil.close(session);\n"
            + "        return result;\n"
            + "    }\n"
            + "\n"
            + "    @RequestMapping(value = \"/delete/{idCLASS}\", method = RequestMethod.DELETE)\n"
            + "    @Override\n"
            + "    public ResultCLASS deleteOne(int idCLASS, HttpServletRequest request, HttpServletResponse response) {\n"
            + "        CLASSDto POJODto = new CLASSDto();\n"
            + "        POJODto.setIdCLASS(idCLASS);\n"
            + "        ResultCLASS result = new ResultCLASS(POJODto, ResultStatus.OBJECT_NULL.getValue(), ResultStatus.OBJECT_NULL.toString());\n"
            + "        Session session = null;\n"
            + "        Transaction tx = null;\n"
            + "        try {\n"
            + "            // PERMISSION\n"
            + "            Privilege.hasPrivileges(request, Actions.DROP);\n"
            + "            // VALIDATE\n"
            + "            POJOValidation.delete(POJODto);\n"
            + "            // TRANSACTION\n"
            + "            session = HibernateUtil.getSessionFactory().openSession();\n"
            + "            tx = session.beginTransaction();\n"
            + "            // MAP\n"
            + "            CLASS POJO = POJOMapper.fromDtoToEntity(POJODto);\n"
            + "            // CREATE\n"
            + "            POJO = POJODao.delete(POJO, session);\n"
            + "            tx.commit();\n"
            + "            session.close();\n"
            + "            // CLOSE SESSION\n"
            + "            if (POJO == null) {\n"
            + "                throw new DataBaseException(\"No se logró borrar de la base de datos\");\n"
            + "            }\n"
            + "            // REMAP\n"
            + "            POJODto = POJOMapper.fromEntityToDto(POJO);\n"
            + "            result.setCLASS(POJODto);\n"
            + "            result.setStatus(ResultStatus.OK.getValue());\n"
            + "            result.setMessage(\"Dirección eliminada con éxito\");\n"
            + "        } catch (ForbiddenException ex) {\n"
            + "            result.setStatus(ResultStatus.FORBIDDEN.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en privilegios\", ex);\n"
            + "        } catch (ValidationException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_IS_NOT_VALID.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error de validación \", ex);\n"
            + "        } catch (HibernateException ex) {\n"
            + "            ConnectionUtil.rollBack(tx);\n"
            + "            result.setStatus(ResultStatus.ERROR_HIBERNATE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en hibernate\", ex);\n"
            + "        } catch (MapperException ex) {\n"
            + "            result.setStatus(ResultStatus.OBJECT_NOT_MAPPED.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error en el mapeo\", ex);\n"
            + "        } catch (DataBaseException ex) {\n"
            + "            result.setStatus(ResultStatus.ERROR_DATA_BASE.getValue());\n"
            + "            result.setMessage(ex.getMessage());\n"
            + "            LOG.error(\"Error al crear\", ex);\n"
            + "        } catch (Exception e) {\n"
            + "            result.setStatus(ResultStatus.ERROR.getValue());\n"
            + "            result.setMessage(e.getMessage());\n"
            + "            LOG.error(\"Error\", e);\n"
            + "        }\n"
            + "        ConnectionUtil.close(session);\n"
            + "        return result;\n"
            + "    }\n"
            + "\n"
            + "    @RequestMapping(value = \"/all/\", method = RequestMethod.GET)\n"
            + "    @Override\n"
            + "    public List<CLASSDto> getAll(HttpServletRequest request, HttpServletResponse response) {\n"
            + "        Session session = null;\n"
            + "        List<CLASSDto> POJODtos = new ArrayList<>();\n"
            + "        try {\n"
            + "            // PERMISSION\n"
            + "            Privilege.hasPrivileges(request, Actions.SHOW);\n"
            + "            session = HibernateUtil.getSessionFactory().openSession();\n"
            + "            List<CLASS> addreses = POJODao.readAll(session);\n"
            + "            session.close();\n"
            + "            POJODtos = POJOMapper.fromEntityToDto(addreses);\n"
            + "        } catch (ForbiddenException ex) {\n"
            + "            LOG.error(\"Error en privilegios\", ex);\n"
            + "        } catch (MapperException ex) {\n"
            + "            LOG.error(\"Error en el mapeo\", ex);\n"
            + "        } catch (HibernateException ex) {\n"
            + "            LOG.error(\"Error en Hibernate\", ex);\n"
            + "        } catch (Exception e) {\n"
            + "            LOG.error(\"Error\", e);\n"
            + "        }\n"
            + "        ConnectionUtil.close(session);\n"
            + "        return POJODtos;\n"
            + "    }\n"
            + "\n"
            + "}\n"
            + "";

    public static void main(String[] args) throws FileNotFoundException, IOException {
        File folderPojo = new File("/home/gvalentin/NetBeansProjects/administracionIlustraciones/src/main/java/mx/trillas/administracionilustraciones/model/entity/pojo/");
        File validation = new File("/home/gvalentin/NetBeansProjects/administracionIlustraciones/src/main/java/mx/trillas/administracionilustraciones/controller/service/");
        File[] pojos = folderPojo.listFiles();
        for (File pojo : pojos) {
            String clazz = pojo.getName().replace(".java", "");
            String object = clazz.toLowerCase();
            File v = new File(validation, pojo.getName().replace(".", "Controller."));
//            File v = new File(validation, "Result" + pojo.getName());
            if (v.exists()) {
                System.out.println("Ya existe " + v.getName());
            } else {
                String newCode = CODE.replace("CLASS", clazz).replace("POJO", object);
                System.out.println(newCode);
                FileOutputStream fos = new FileOutputStream(v);
                fos.write(newCode.getBytes());
                fos.close();
            }
        }

    }

}
